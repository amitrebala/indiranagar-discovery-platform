#!/bin/bash

# Enhanced Experience Intelligence Platform - Account Setup Script
# This script guides you through setting up all required external accounts and API keys

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Project paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
WEB_APP_DIR="$PROJECT_ROOT/apps/web"
ENV_FILE="$WEB_APP_DIR/.env.local"

# Logging functions
log_header() {
    echo -e "${CYAN}=============================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}=============================================${NC}"
    echo ""
}

log_step() {
    echo -e "${BLUE}[STEP $1]${NC} $2"
    echo ""
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_required() {
    echo -e "${RED}[REQUIRED]${NC} $1"
}

log_optional() {
    echo -e "${YELLOW}[OPTIONAL]${NC} $1"
}

# Function to wait for user input
wait_for_enter() {
    echo -e "${CYAN}Press ENTER when ready to continue...${NC}"
    read -r
    echo ""
}

# Function to get user input with prompt
get_input() {
    local prompt="$1"
    local var_name="$2"
    local is_secret="${3:-false}"
    
    echo -e "${YELLOW}$prompt${NC}"
    if [ "$is_secret" = "true" ]; then
        read -s -r input
        echo ""  # Add newline since -s doesn't show it
    else
        read -r input
    fi
    
    eval "$var_name='$input'"
}

# Function to validate URL format
validate_url() {
    local url="$1"
    if [[ $url =~ ^https?:// ]]; then
        return 0
    else
        return 1
    fi
}

# Function to create environment file
create_env_file() {
    log_info "Creating environment configuration file..."
    
    cat > "$ENV_FILE" << EOF
# Enhanced Experience Intelligence Platform - Environment Configuration
# Generated by setup script on $(date)

# ============================================
# APPLICATION CONFIGURATION
# ============================================
NODE_ENV=development
NEXT_PUBLIC_APP_URL=http://localhost:3000

# ============================================
# REQUIRED: DATABASE & STORAGE (SUPABASE)
# ============================================
NEXT_PUBLIC_SUPABASE_URL=$SUPABASE_URL
NEXT_PUBLIC_SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY
SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_KEY

# ============================================
# REQUIRED: WEATHER API (OPENWEATHERMAP)
# ============================================
NEXT_PUBLIC_WEATHER_API_KEY=$OPENWEATHER_API_KEY

# ============================================
# OPTIONAL: ENHANCED MAPS (MAPBOX)
# ============================================
$([ -n "$MAPBOX_TOKEN" ] && echo "NEXT_PUBLIC_MAPBOX_TOKEN=$MAPBOX_TOKEN" || echo "# NEXT_PUBLIC_MAPBOX_TOKEN=your_mapbox_token_here")

# ============================================
# OPTIONAL: BACKUP WEATHER API
# ============================================
$([ -n "$WEATHERAPI_KEY" ] && echo "WEATHERAPI_KEY=$WEATHERAPI_KEY" || echo "# WEATHERAPI_KEY=your_weatherapi_key_here")

# ============================================
# FEATURE FLAGS - ALL 5 EPICS ENABLED
# ============================================
NEXT_PUBLIC_ENABLE_SOCIAL_COMMUNITY=true
NEXT_PUBLIC_ENABLE_WEATHER_RECOMMENDATIONS=true
NEXT_PUBLIC_ENABLE_NATURAL_LANGUAGE_SEARCH=true
NEXT_PUBLIC_ENABLE_PHOTO_MARKERS=true
NEXT_PUBLIC_ENABLE_JOURNEY_ROUTES=true
NEXT_PUBLIC_ENABLE_ACCESSIBILITY_FEATURES=true
NEXT_PUBLIC_ENABLE_PWA_FEATURES=true
EOF

    log_success "Environment file created at: $ENV_FILE"
}

# Function to setup Supabase
setup_supabase() {
    log_header "STEP 1: SUPABASE DATABASE & STORAGE SETUP"
    
    log_required "Supabase is CRITICAL for the platform - database, authentication, and file storage"
    echo ""
    
    log_info "1. Go to: ${CYAN}https://supabase.com${NC}"
    log_info "2. Click 'Sign Up' and create an account"
    log_info "3. Click 'New Project'"
    log_info "4. Choose organization and enter project details:"
    log_info "   - Name: 'Indiranagar Discovery Platform' (or your choice)"
    log_info "   - Database Password: (choose a strong password)"
    log_info "   - Region: Select closest to your location"
    log_info "5. Wait for project creation (2-3 minutes)"
    echo ""
    
    wait_for_enter
    
    log_info "6. Once project is ready, go to Settings > API"
    log_info "7. Copy the following values:"
    echo ""
    
    get_input "Enter your Supabase Project URL (starts with https://): " SUPABASE_URL
    if ! validate_url "$SUPABASE_URL"; then
        log_error "Invalid URL format. Please include https://"
        exit 1
    fi
    
    get_input "Enter your Supabase Anon Key: " SUPABASE_ANON_KEY
    get_input "Enter your Supabase Service Role Key: " SUPABASE_SERVICE_KEY true
    
    log_success "Supabase configuration collected!"
    echo ""
    
    log_info "Next, we need to set up the database schema..."
    log_info "8. In Supabase dashboard, go to 'SQL Editor'"
    log_info "9. Copy and run the following migration files in order:"
    log_info "   - $WEB_APP_DIR/supabase/migrations/001_create_places_schema.sql"
    log_info "   - $WEB_APP_DIR/supabase/migrations/002_create_suggestions_schema.sql"
    log_info "   - $WEB_APP_DIR/supabase/migrations/003_create_community_suggestions_schema.sql"
    log_info "   - $WEB_APP_DIR/supabase/migrations/004_create_community_events_schema.sql"
    echo ""
    
    log_info "10. Go to Storage > Create Bucket:"
    log_info "    - Bucket name: 'places'"
    log_info "    - Make public: Yes"
    log_info "    - File size limit: 50MB"
    echo ""
    
    wait_for_enter
}

# Function to setup OpenWeatherMap
setup_openweathermap() {
    log_header "STEP 2: OPENWEATHERMAP API SETUP"
    
    log_required "OpenWeatherMap is REQUIRED for weather-aware recommendations (Epic 4)"
    echo ""
    
    log_info "1. Go to: ${CYAN}https://openweathermap.org/api${NC}"
    log_info "2. Click 'Sign Up' and create a free account"
    log_info "3. Verify your email address"
    log_info "4. Go to 'My API Keys' in your dashboard"
    log_info "5. Copy your default API key (or create a new one)"
    log_info ""
    log_info "📊 Free tier limits: 1,000 API calls/day (sufficient for development)"
    echo ""
    
    wait_for_enter
    
    get_input "Enter your OpenWeatherMap API Key: " OPENWEATHER_API_KEY true
    
    log_success "OpenWeatherMap API key collected!"
    echo ""
}

# Function to setup GitHub repository
setup_github() {
    log_header "STEP 3: GITHUB REPOSITORY SETUP"
    
    log_required "GitHub is REQUIRED for version control and deployment automation"
    echo ""
    
    # Check if we're already in a git repository
    if [ -d "$PROJECT_ROOT/.git" ]; then
        log_success "✓ Git repository already initialized"
        
        # Check if remote origin exists
        if git remote get-url origin &>/dev/null; then
            CURRENT_REMOTE=$(git remote get-url origin)
            log_success "✓ Remote origin already configured: $CURRENT_REMOTE"
            echo ""
            log_info "Your repository is ready for deployment!"
        else
            log_warning "Git repository exists but no remote origin configured"
            setup_github_remote
        fi
    else
        log_info "No git repository found. Let's set one up!"
        setup_github_from_scratch
    fi
    
    # Check GitHub CLI and offer to install/setup
    if command -v gh &> /dev/null; then
        log_success "✓ GitHub CLI (gh) is installed"
        if gh auth status &>/dev/null; then
            log_success "✓ GitHub CLI is authenticated"
            
            # Offer to create repository with GitHub CLI
            if [ ! -d "$PROJECT_ROOT/.git" ] || ! git remote get-url origin &>/dev/null; then
                echo ""
                echo "Do you want to create and setup GitHub repository automatically? (y/n)"
                read -r create_repo_auto
                
                if [[ $create_repo_auto =~ ^[Yy]$ ]]; then
                    setup_github_with_cli
                    return
                fi
            fi
        else
            log_info "GitHub CLI found but not authenticated"
            echo "Do you want to authenticate GitHub CLI now? (y/n)"
            read -r auth_gh
            
            if [[ $auth_gh =~ ^[Yy]$ ]]; then
                log_info "Running GitHub CLI authentication..."
                gh auth login
                log_success "✓ GitHub CLI authenticated"
            fi
        fi
    else
        log_info "GitHub CLI not installed (optional but recommended)"
        echo "Do you want to install GitHub CLI for easier repository management? (y/n)"
        read -r install_gh
        
        if [[ $install_gh =~ ^[Yy]$ ]]; then
            if command -v brew &> /dev/null; then
                log_info "Installing GitHub CLI with Homebrew..."
                brew install gh
                log_success "✓ GitHub CLI installed"
                
                log_info "Authenticating GitHub CLI..."
                gh auth login
                log_success "✓ GitHub CLI authenticated"
            elif command -v apt &> /dev/null; then
                log_info "Installing GitHub CLI with apt..."
                sudo apt install gh
                gh auth login
            elif command -v yum &> /dev/null; then
                log_info "Installing GitHub CLI with yum..."
                sudo yum install gh
                gh auth login  
            else
                log_info "Please install GitHub CLI manually: https://cli.github.com"
            fi
        fi
    fi
    
    echo ""
}

# Function to setup GitHub remote for existing repo
setup_github_remote() {
    echo ""
    log_info "You need to create a GitHub repository and connect it:"
    echo ""
    log_info "1. Go to: ${CYAN}https://github.com/new${NC}"
    log_info "2. Repository name: 'indiranagar-discovery-platform' (or your choice)"
    log_info "3. Description: 'Enhanced Experience Intelligence Platform'"
    log_info "4. Keep it Public or Private (your choice)"
    log_info "5. Do NOT initialize with README (we have existing code)"
    log_info "6. Click 'Create repository'"
    echo ""
    
    wait_for_enter
    
    get_input "Enter your GitHub repository URL (e.g., https://github.com/username/repo.git): " GITHUB_REPO_URL
    
    if [[ $GITHUB_REPO_URL =~ ^https://github\.com/.+/.+\.git$ ]]; then
        log_info "Adding GitHub remote..."
        git remote add origin "$GITHUB_REPO_URL"
        log_success "✓ GitHub remote added"
        
        log_info "Pushing existing code to GitHub..."
        git branch -M main
        git push -u origin main
        log_success "✓ Code pushed to GitHub"
    else
        log_error "Invalid GitHub URL format. Please use: https://github.com/username/repo.git"
        log_info "You can set this up manually later with:"
        log_info "git remote add origin YOUR_REPO_URL"
        log_info "git push -u origin main"
    fi
}

# Function to setup GitHub from scratch
setup_github_from_scratch() {
    echo ""
    log_info "Setting up Git repository from scratch..."
    
    # Initialize git repository
    cd "$PROJECT_ROOT"
    git init
    log_success "✓ Git repository initialized"
    
    # Create .gitignore if it doesn't exist
    if [ ! -f ".gitignore" ]; then
        log_info "Creating .gitignore file..."
        cat > .gitignore << 'EOF'
# Dependencies
node_modules/
.pnp
.pnp.js

# Testing
coverage/

# Next.js
.next/
out/

# Production
build/
dist/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Vercel
.vercel

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Supabase
.supabase/
EOF
        log_success "✓ .gitignore created"
    fi
    
    # Add and commit existing files
    log_info "Adding files to git..."
    git add .
    git commit -m "Initial commit: Enhanced Experience Intelligence Platform with 5 Epics

Complete implementation including:
- Epic 1: Foundation & Core Infrastructure
- Epic 2: Place Discovery & Journey Experiences  
- Epic 3: Social Coordination & Community Features
- Epic 4: Enhanced Discovery & Content Hub
- Epic 5: UX Excellence & Accessibility

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    log_success "✓ Initial commit created"
    
    # Setup GitHub repository
    setup_github_remote
}

# Function to setup deployment platform
setup_deployment() {
    log_header "STEP 4: DEPLOYMENT PLATFORM SETUP"
    
    echo "Choose your deployment platform:"
    echo "1) Vercel (Recommended - easiest setup, requires GitHub)"
    echo "2) Netlify (Alternative - also requires GitHub)"
    echo "3) Docker/Self-hosted"
    echo "4) Other/Skip for now"
    echo ""
    
    get_input "Enter your choice (1-4): " DEPLOY_CHOICE
    
    case $DEPLOY_CHOICE in
        1)
            setup_vercel_deployment
            ;;
        2)
            setup_netlify_deployment
            ;;
        3)
            log_info "Docker deployment selected"
            log_info "Use: ${CYAN}./scripts/deploy.sh production docker${NC}"
            ;;
        4)
            log_info "Deployment setup skipped"
            ;;
    esac
    
    echo ""
}

# Function to setup GitHub repository with CLI
setup_github_with_cli() {
    log_info "Creating GitHub repository with GitHub CLI..."
    
    # Get repository details
    get_input "Repository name (default: indiranagar-discovery-platform): " REPO_NAME
    REPO_NAME=${REPO_NAME:-indiranagar-discovery-platform}
    
    get_input "Repository description (default: Enhanced Experience Intelligence Platform): " REPO_DESC  
    REPO_DESC=${REPO_DESC:-"Enhanced Experience Intelligence Platform"}
    
    echo "Repository visibility:"
    echo "1) Public (recommended - easier to share)"
    echo "2) Private"
    get_input "Choose (1-2): " REPO_VISIBILITY
    
    if [ "$REPO_VISIBILITY" = "2" ]; then
        VISIBILITY_FLAG="--private"
    else
        VISIBILITY_FLAG="--public"
    fi
    
    # Initialize git if needed
    if [ ! -d "$PROJECT_ROOT/.git" ]; then
        cd "$PROJECT_ROOT"
        git init
        git add .
        git commit -m "Initial commit: Enhanced Experience Intelligence Platform with 5 Epics

Complete implementation including:
- Epic 1: Foundation & Core Infrastructure  
- Epic 2: Place Discovery & Journey Experiences
- Epic 3: Social Coordination & Community Features
- Epic 4: Enhanced Discovery & Content Hub
- Epic 5: UX Excellence & Accessibility

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    fi
    
    # Create repository
    log_info "Creating repository '$REPO_NAME'..."
    if gh repo create "$REPO_NAME" --description "$REPO_DESC" $VISIBILITY_FLAG --source=. --push; then
        log_success "✓ GitHub repository created and code pushed!"
        log_success "✓ Repository URL: $(gh repo view --web --json url -q .url)"
    else
        log_error "Failed to create repository with GitHub CLI"
        log_info "You can create it manually at: https://github.com/new"
    fi
}

# Function to setup Vercel deployment
setup_vercel_deployment() {
    log_info "Setting up Vercel deployment..."
    echo ""
    log_info "1. Go to: ${CYAN}https://vercel.com${NC}"
    log_info "2. Click 'Sign up' and choose 'Continue with GitHub'"
    log_info "3. Authorize Vercel to access your GitHub repositories"
    log_info "4. Click 'Import Project'"
    log_info "5. Find your repository and click 'Import'"
    log_info "6. Configure project:"
    log_info "   - Framework Preset: Next.js"
    log_info "   - Root Directory: apps/web"
    log_info "   - Build Command: npm run build"
    log_info "   - Output Directory: .next"
    log_info "7. Add Environment Variables:"
    echo ""
    log_info "   Copy these from your .env.local file:"
    log_info "   - NEXT_PUBLIC_SUPABASE_URL"
    log_info "   - NEXT_PUBLIC_SUPABASE_ANON_KEY"
    log_info "   - SUPABASE_SERVICE_ROLE_KEY"
    log_info "   - NEXT_PUBLIC_WEATHER_API_KEY"
    if [ -n "$MAPBOX_TOKEN" ]; then
        log_info "   - NEXT_PUBLIC_MAPBOX_TOKEN"
    fi
    if [ -n "$WEATHERAPI_KEY" ]; then
        log_info "   - WEATHERAPI_KEY"
    fi
    log_info "   - All NEXT_PUBLIC_ENABLE_* feature flags"
    echo ""
    log_info "8. Click 'Deploy'"
    echo ""
    log_info "📝 Vercel will automatically deploy on every push to main branch"
    log_info "🚀 You'll get a production URL like: https://your-project.vercel.app"
    echo ""
    
    # Optional: Install Vercel CLI
    echo "Do you want to install Vercel CLI for local deployment? (y/n)"
    read -r install_vercel_cli
    
    if [[ $install_vercel_cli =~ ^[Yy]$ ]]; then
        log_info "Installing Vercel CLI..."
        if command -v npm &> /dev/null; then
            npm i -g vercel
            log_success "✓ Vercel CLI installed"
            log_info "Run: ${CYAN}vercel login${NC} to authenticate"
            log_info "Run: ${CYAN}vercel${NC} in your project to deploy"
        else
            log_error "npm not found. Install Node.js first, then run: npm i -g vercel"
        fi
    fi
}

# Function to setup Netlify deployment
setup_netlify_deployment() {
    log_info "Setting up Netlify deployment..."
    echo ""
    log_info "1. Go to: ${CYAN}https://netlify.com${NC}"
    log_info "2. Click 'Sign up' and choose 'GitHub'"
    log_info "3. Click 'Add new site' > 'Import an existing project'"
    log_info "4. Choose 'Deploy with GitHub'"
    log_info "5. Select your repository"
    log_info "6. Configure build settings:"
    log_info "   - Base directory: apps/web"
    log_info "   - Build command: npm run build"
    log_info "   - Publish directory: apps/web/.next"
    log_info "7. Add Environment Variables in Site Settings"
    log_info "8. Click 'Deploy site'"
    echo ""
    log_info "📝 Netlify will automatically deploy on every push to main branch"
}

# Function to setup optional services
setup_optional() {
    log_header "STEP 5: OPTIONAL SERVICES SETUP"
    
    log_optional "These services are optional but enhance the platform experience"
    echo ""
    
    # Mapbox setup
    echo "Do you want to set up Mapbox for enhanced maps? (y/n)"
    read -r setup_mapbox
    
    if [[ $setup_mapbox =~ ^[Yy]$ ]]; then
        log_info "Setting up Mapbox..."
        log_info "1. Go to: ${CYAN}https://www.mapbox.com${NC}"
        log_info "2. Sign up for free account"
        log_info "3. Go to Account > Access Tokens"
        log_info "4. Copy your default public token"
        echo ""
        wait_for_enter
        get_input "Enter your Mapbox Access Token: " MAPBOX_TOKEN true
        log_success "Mapbox token collected!"
    else
        log_info "Skipping Mapbox - platform will use default Leaflet maps"
        MAPBOX_TOKEN=""
    fi
    
    echo ""
    
    # WeatherAPI backup setup
    echo "Do you want to set up WeatherAPI.com as backup weather provider? (y/n)"
    read -r setup_weatherapi
    
    if [[ $setup_weatherapi =~ ^[Yy]$ ]]; then
        log_info "Setting up WeatherAPI.com..."
        log_info "1. Go to: ${CYAN}https://www.weatherapi.com${NC}"
        log_info "2. Sign up for free account (1M calls/month)"
        log_info "3. Go to dashboard and copy API key"
        echo ""
        wait_for_enter
        get_input "Enter your WeatherAPI.com API Key: " WEATHERAPI_KEY true
        log_success "WeatherAPI key collected!"
    else
        log_info "Skipping WeatherAPI - using single weather provider"
        WEATHERAPI_KEY=""
    fi
}

# Function to run database migrations
run_migrations() {
    log_header "STEP 6: DATABASE MIGRATION"
    
    log_info "Do you want to run database migrations now? (y/n)"
    read -r run_migrations_now
    
    if [[ $run_migrations_now =~ ^[Yy]$ ]]; then
        log_info "Running database migrations..."
        
        if command -v psql &> /dev/null; then
            log_info "PostgreSQL client found. Running migrations..."
            # Note: This would require connection string setup
            log_warning "Automatic migration requires additional setup"
            log_info "Please run migrations manually in Supabase SQL Editor"
        else
            log_info "PostgreSQL client not found"
            log_info "Please run migrations manually in Supabase SQL Editor"
        fi
    else
        log_info "Remember to run migrations in Supabase SQL Editor"
    fi
}

# Function to verify setup
verify_setup() {
    log_header "SETUP VERIFICATION"
    
    log_info "Verifying your setup..."
    echo ""
    
    # Check required variables
    if [ -n "$SUPABASE_URL" ] && [ -n "$SUPABASE_ANON_KEY" ] && [ -n "$SUPABASE_SERVICE_KEY" ]; then
        log_success "✓ Supabase configuration complete"
    else
        log_error "✗ Supabase configuration incomplete"
    fi
    
    if [ -n "$OPENWEATHER_API_KEY" ]; then
        log_success "✓ OpenWeatherMap API key configured"
    else
        log_error "✗ OpenWeatherMap API key missing"
    fi
    
    # Check optional variables
    if [ -n "$MAPBOX_TOKEN" ]; then
        log_success "✓ Mapbox token configured (optional)"
    else
        log_info "- Mapbox token not configured (optional)"
    fi
    
    if [ -n "$WEATHERAPI_KEY" ]; then
        log_success "✓ WeatherAPI backup configured (optional)"
    else
        log_info "- WeatherAPI backup not configured (optional)"
    fi
    
    # Check GitHub setup
    if [ -d "$PROJECT_ROOT/.git" ]; then
        log_success "✓ Git repository initialized"
        
        if git remote get-url origin &>/dev/null; then
            REPO_URL=$(git remote get-url origin)
            log_success "✓ GitHub remote configured: $REPO_URL"
        else
            log_warning "- GitHub remote not configured yet"
        fi
    else
        log_warning "- Git repository not initialized"
    fi
    
    echo ""
    log_info "Environment file location: $ENV_FILE"
    
    if [ -f "$ENV_FILE" ]; then
        log_success "✓ Environment file created successfully"
    else
        log_error "✗ Environment file creation failed"
    fi
}

# Function to show next steps
show_next_steps() {
    log_header "NEXT STEPS"
    
    echo -e "${GREEN}🎉 Setup Complete! Here's what to do next:${NC}"
    echo ""
    
    echo "1. ${CYAN}Test your setup:${NC}"
    echo "   cd $WEB_APP_DIR"
    echo "   npm run dev"
    echo "   Open http://localhost:3000"
    echo ""
    
    echo "2. ${CYAN}Run database migrations:${NC}"
    echo "   - Go to Supabase dashboard > SQL Editor"
    echo "   - Run migration files in /apps/web/supabase/migrations/"
    echo ""
    
    echo "3. ${CYAN}Push to GitHub (if not done already):${NC}"
    echo "   git add ."
    echo "   git commit -m 'Setup complete with all API keys'"
    echo "   git push origin main"
    echo ""
    
    echo "4. ${CYAN}Deploy to production:${NC}"
    echo "   ./scripts/deploy.sh production"
    echo "   Or automatic deployment via Vercel/Netlify on git push"
    echo ""
    
    echo "5. ${CYAN}Verify all 5 Epic features:${NC}"
    echo "   - Epic 1: Foundation & Core Infrastructure"
    echo "   - Epic 2: Place Discovery & Journey Experiences"
    echo "   - Epic 3: Social Coordination & Community Features"
    echo "   - Epic 4: Enhanced Discovery & Content Hub"
    echo "   - Epic 5: UX Excellence & Accessibility"
    echo ""
    
    echo "📚 ${CYAN}Documentation:${NC}"
    echo "   - Deployment Guide: docs/deployment-guide.md"
    echo "   - 5-Epic Guide: docs/5-epic-deployment-guide.md"
    echo "   - Architecture: docs/architecture/"
    echo ""
    
    log_success "Your Enhanced Experience Intelligence Platform is ready! 🚀"
}

# Main execution
main() {
    log_header "ENHANCED EXPERIENCE INTELLIGENCE PLATFORM SETUP"
    
    echo -e "${CYAN}This script will guide you through setting up all required accounts and API keys${NC}"
    echo -e "${CYAN}for the complete 5-Epic platform deployment.${NC}"
    echo ""
    
    echo -e "${YELLOW}⏱️  Estimated time: 15-20 minutes${NC}"
    echo -e "${YELLOW}📋 You'll need: Email addresses for account creation${NC}"
    echo -e "${YELLOW}💳 All services used are FREE TIER${NC}"
    echo ""
    
    wait_for_enter
    
    # Run setup steps
    setup_supabase
    setup_openweathermap
    setup_github
    setup_deployment
    setup_optional
    
    # Create environment file
    create_env_file
    
    # Verify setup
    verify_setup
    
    # Show next steps
    show_next_steps
}

# Run main function
main "$@"