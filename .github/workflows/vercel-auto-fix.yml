name: Vercel Auto-Fix

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'Vercel Project ID'
        required: false
        type: string
      team_id:
        description: 'Vercel Team ID (optional)'
        required: false
        type: string
      force_fix:
        description: 'Force fix even if deployment is not in ERROR state'
        required: false
        type: boolean
        default: false
  
  schedule:
    - cron: '*/10 * * * *'  # Every 10 minutes
  
  repository_dispatch:
    types: [vercel-deployment-failed]

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl netcat-openbsd
          
      - name: Install Claude Code
        run: |
          # Download and install Claude Code
          curl -fsSL https://claude.ai/install.sh | bash
          # Add to PATH for subsequent steps
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        
      - name: Validate environment
        run: |
          if [[ -z "$VERCEL_TOKEN" ]]; then
            echo "::error::VERCEL_TOKEN secret is required"
            exit 1
          fi
          
          # Use input project ID if provided, otherwise use secret
          if [[ -n "${{ github.event.inputs.project_id }}" ]]; then
            echo "PROJECT_ID=${{ github.event.inputs.project_id }}" >> $GITHUB_ENV
          elif [[ -z "$PROJECT_ID" ]]; then
            echo "::error::PROJECT_ID must be provided via input or secret"
            exit 1
          fi
          
          # Use input team ID if provided
          if [[ -n "${{ github.event.inputs.team_id }}" ]]; then
            echo "TEAM_ID=${{ github.event.inputs.team_id }}" >> $GITHUB_ENV
          fi
          
          echo "Project ID: $PROJECT_ID"
          echo "Team ID: ${TEAM_ID:-'Not specified'}"
      
      - name: Check deployment status
        id: check-deployment
        run: |
          echo "Checking deployment status for project: $PROJECT_ID"
          
          # Build API URL
          url="https://api.vercel.com/v6/deployments?projectId=$PROJECT_ID&limit=1"
          if [[ -n "$TEAM_ID" ]]; then
            url="$url&teamId=$TEAM_ID"
          fi
          
          # Get latest deployment
          deployment=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "$url" | jq -r '.deployments[0]')
          
          if [[ "$deployment" == "null" ]]; then
            echo "::error::Could not fetch deployment information"
            exit 1
          fi
          
          deployment_id=$(echo "$deployment" | jq -r '.uid')
          state=$(echo "$deployment" | jq -r '.state')
          created_at=$(echo "$deployment" | jq -r '.createdAt')
          
          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
          echo "state=$state" >> $GITHUB_OUTPUT
          
          echo "Latest deployment: $deployment_id"
          echo "State: $state"
          echo "Created: $created_at"
          
          # Check if this is a known deployment we should skip
          KNOWN_DEPLOYMENT_FILE=".vercel-last-known-deployment"
          if [[ -f "$KNOWN_DEPLOYMENT_FILE" ]]; then
            known_deployment=$(cat "$KNOWN_DEPLOYMENT_FILE")
            if [[ "$deployment_id" == "$known_deployment" ]]; then
              echo "üîç This is a known deployment, skipping..."
              echo "needs_fix=false" >> $GITHUB_OUTPUT
              echo "Deployment is already known: $deployment_id"
              exit 0
            fi
          fi
          
          # Check if fix is needed for NEW deployments only
          if [[ "$state" == "ERROR" ]] || [[ "${{ github.event.inputs.force_fix }}" == "true" ]]; then
            echo "needs_fix=true" >> $GITHUB_OUTPUT
            echo "üö® NEW deployment failure detected - needs fixing"
            
            # Update known deployment file for future runs
            echo "$deployment_id" > "$KNOWN_DEPLOYMENT_FILE"
            git add "$KNOWN_DEPLOYMENT_FILE" || true
            git commit -m "chore: track known deployment $deployment_id" || true
          else
            echo "needs_fix=false" >> $GITHUB_OUTPUT
            echo "‚úÖ NEW deployment is in good state: $state"
            
            # Update known deployment file
            echo "$deployment_id" > "$KNOWN_DEPLOYMENT_FILE"
            git add "$KNOWN_DEPLOYMENT_FILE" || true
            git commit -m "chore: track known deployment $deployment_id" || true
          fi
      
      - name: Get deployment logs
        if: steps.check-deployment.outputs.needs_fix == 'true'
        id: get-logs
        run: |
          deployment_id="${{ steps.check-deployment.outputs.deployment_id }}"
          echo "Fetching logs for deployment: $deployment_id"
          
          logs_url="https://api.vercel.com/v2/deployments/$deployment_id/events"
          logs=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "$logs_url")
          
          # Extract error information
          error_logs=$(echo "$logs" | jq -r '.[] | select(.type == "stderr" and (.text | contains("error") or contains("Error") or contains("failed"))) | .text' | head -20)
          
          if [[ -n "$error_logs" ]]; then
            echo "Found error logs:"
            echo "$error_logs"
            
            # Save to file for Claude Code
            cat << EOF > deployment-errors.txt
          DEPLOYMENT ERROR ANALYSIS
          =========================
          
          Deployment ID: $deployment_id
          Project ID: $PROJECT_ID
          Timestamp: $(date -u)
          
          ERROR LOGS:
          $error_logs
          
          Please analyze these deployment errors and fix them in the codebase.
          Focus on:
          1. TypeScript type errors
          2. Build configuration issues  
          3. Missing dependencies
          4. Import/export issues
          5. Syntax errors
          EOF
            
            echo "has_errors=true" >> $GITHUB_OUTPUT
          else
            echo "No specific error logs found"
            echo "has_errors=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run BMAD Development Agent auto-fix
        if: steps.check-deployment.outputs.needs_fix == 'true' && steps.get-logs.outputs.has_errors == 'true'
        run: |
          echo "üöÄ Running BMAD Development Agent for emergency deployment recovery..."
          
          # Extract error information for BMAD agent
          error_info=$(cat deployment-errors.txt)
          deployment_id="${{ steps.check-deployment.outputs.deployment_id }}"
          
          # Create BMAD agent activation prompt
          cat << EOF > bmad-agent-prompt.txt
          üö® **BMAD EMERGENCY ACTIVATION** üö®
          
          You are being activated as a BMAD-METHOD Development Agent for critical deployment recovery.
          
          **AGENT ACTIVATION COMMAND**: /dev
          
          **CRITICAL MISSION PARAMETERS**:
          - **Status**: DEPLOYMENT FAILURE - IMMEDIATE ACTION REQUIRED
          - **Deployment ID**: $deployment_id
          - **Recovery Attempt**: 1 (GitHub Actions)
          - **Agent Role**: DEVELOPER
          - **Framework**: BMAD-METHOD Story-Driven Development
          - **Platform**: Vercel/Next.js/TypeScript
          
          **PRIMARY DIRECTIVE**: 
          Systematic deployment recovery using BMAD methodology.
          
          **ERROR ANALYSIS**:
          \`\`\`
          $error_info
          \`\`\`
          
          **CRITICAL EXECUTION REQUIREMENTS**:
          
          1. **üéØ EMERGENCY MODE** - Focus on speed and precision
          2. **üîß MINIMAL INTERVENTION** - Fix only deployment-blocking errors
          3. **‚ö° SYSTEMATIC APPROACH** - Follow BMAD story-driven development
          4. **‚úÖ VERIFY EACH STEP** - Run verification commands
          5. **üìù COMMIT PROPERLY** - Use proper commit format
          
          **WORKFLOW EXECUTION**:
          - Phase 1: Analysis & Planning (5 min max)
          - Phase 2: Implementation (systematic error resolution)  
          - Phase 3: Quality Assurance & Commit
          
          **ERROR PRIORITY ORDER**:
          1. **üî¥ CRITICAL** - TypeScript compilation errors
          2. **üî¥ CRITICAL** - Missing critical dependencies
          3. **üü° HIGH** - Import/export resolution failures
          4. **üü° HIGH** - Module not found errors
          5. **üü¢ MEDIUM** - Linting and code style issues
          
          **IMPLEMENTATION STRATEGY**:
          
          ### Step 1: Environment Setup
          \`\`\`bash
          # Check repository structure
          pwd && ls -la
          
          # Navigate to correct directory
          if [[ -f "apps/web/package.json" ]]; then
              echo "Multi-package repository detected"
              cd apps/web
          fi
          \`\`\`
          
          ### Step 2: Critical Error Resolution
          
          **TypeScript Compilation Errors:**
          - Fix type mismatches immediately
          - Add missing type definitions
          - Resolve import type issues
          - Use \`any\` type as emergency fallback if needed
          
          **Missing Dependencies:**
          - Check package.json for missing packages
          - Install required dependencies: \`npm install [package]\`
          - Update import statements if needed
          
          **Module Resolution Issues:**
          - Fix relative/absolute import paths
          - Ensure exported modules match imports
          - Check for case sensitivity issues
          
          ### Step 3: Verification Process
          After each fix category:
          
          \`\`\`bash
          # Critical verification - MUST PASS
          npm run build 2>&1
          
          # Type checking verification
          npm run type-check 2>&1 || tsc --noEmit 2>&1
          
          # Linting (if critical for build)
          npm run lint 2>&1
          \`\`\`
          
          ### Step 4: Commit Process
          Use this exact commit message format:
          
          \`\`\`
          fix: emergency deployment recovery via BMAD agent
          
          Deployment-ID: $deployment_id
          BMAD-Method: GitHub Actions automated recovery
          Error-Categories: [list main categories fixed]
          Build-Status: VERIFIED
          Platform: GitHub Actions
          
          Automated fixes applied through BMAD development agent:
          - [specific fix 1]
          - [specific fix 2]  
          - [specific fix 3]
          
          ü§ñ Generated with Claude Code (BMAD-METHOD)
          Co-Authored-By: Claude <noreply@anthropic.com>
          \`\`\`
          
          **SUCCESS CRITERIA**:
          - ‚úÖ \`npm run build\` completes successfully
          - ‚úÖ All TypeScript errors resolved
          - ‚úÖ All import/export issues fixed
          - ‚úÖ No new critical errors introduced
          
          **DEPLOYMENT CONTEXT**:
          This is running in GitHub Actions for automated deployment recovery.
          The repository has been checked out and dependencies are available.
          Focus on surgical fixes that will allow the Vercel deployment to succeed.
          
          üöÄ **BEGIN BMAD DEVELOPMENT AGENT EXECUTION NOW**
          
          Execute systematic deployment recovery using the BMAD methodology.
          EOF
          
          # Run Claude Code with BMAD agent prompt and extended timeout
          timeout 600 claude-code < bmad-agent-prompt.txt || {
            echo "::warning::BMAD Development Agent execution failed or timed out"
            exit 0  # Don't fail the workflow, allow manual intervention
          }
          
          echo "‚úÖ BMAD Development Agent execution completed"
      
      - name: Validate fixes
        if: steps.check-deployment.outputs.needs_fix == 'true'
        run: |
          echo "Validating fixes..."
          
          # Check if package.json exists and run appropriate commands
          if [[ -f "package.json" ]]; then
            if jq -e '.scripts.lint' package.json > /dev/null; then
              echo "Running lint..."
              npm run lint || echo "::warning::Lint failed"
            fi
            
            if jq -e '.scripts["type-check"]' package.json > /dev/null; then
              echo "Running type check..."
              npm run type-check || echo "::warning::Type check failed"
            fi
            
            if jq -e '.scripts.build' package.json > /dev/null; then
              echo "Testing build..."
              npm run build || echo "::warning::Build failed"
            fi
          fi
          
          # Check apps/web directory
          if [[ -f "apps/web/package.json" ]]; then
            cd apps/web
            
            if jq -e '.scripts.lint' package.json > /dev/null; then
              echo "Running lint in apps/web..."
              npm run lint || echo "::warning::Lint failed in apps/web"
            fi
            
            if jq -e '.scripts.build' package.json > /dev/null; then
              echo "Testing build in apps/web..."
              npm run build || echo "::warning::Build failed in apps/web"
            fi
          fi
      
      - name: Commit and push BMAD fixes
        if: steps.check-deployment.outputs.needs_fix == 'true'
        run: |
          # Configure git
          git config user.name "BMAD Development Agent"
          git config user.email "bmad-agent@github-actions.com"
          
          # Check for changes
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit from BMAD agent"
            exit 0
          fi
          
          # Stage all changes
          git add .
          
          # Create comprehensive BMAD commit message
          commit_message="fix: emergency deployment recovery via BMAD GitHub Actions
          
          Deployment-ID: ${{ steps.check-deployment.outputs.deployment_id }}
          BMAD-Method: GitHub Actions automated recovery
          Recovery-Attempt: 1
          Agent-Role: Developer
          Platform: GitHub Actions
          Timestamp: $(date -u)
          
          This commit contains automated fixes generated by the BMAD
          development agent to resolve critical Vercel deployment failures.
          
          The BMAD methodology ensures systematic, story-driven development
          with focus on minimal intervention and maximum deployment success.
          
          ü§ñ Generated with Claude Code (BMAD-METHOD)
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git commit -m "$commit_message"
          
          # Push changes
          git push origin ${{ github.ref_name }}
          
          echo "‚úÖ BMAD fixes committed and pushed successfully"
      
      - name: Wait for new deployment
        if: steps.check-deployment.outputs.needs_fix == 'true'
        id: wait-deployment
        run: |
          echo "Waiting for new deployment after fixes..."
          
          max_wait=300  # 5 minutes
          wait_time=0
          check_interval=10
          
          while [[ $wait_time -lt $max_wait ]]; do
            # Get latest deployment
            url="https://api.vercel.com/v6/deployments?projectId=$PROJECT_ID&limit=1"
            if [[ -n "$TEAM_ID" ]]; then
              url="$url&teamId=$TEAM_ID"
            fi
            
            deployment=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "$url" | jq -r '.deployments[0]')
            new_deployment_id=$(echo "$deployment" | jq -r '.uid')
            new_state=$(echo "$deployment" | jq -r '.state')
            
            echo "Current deployment: $new_deployment_id (state: $new_state)"
            
            # Check if this is a new deployment
            if [[ "$new_deployment_id" != "${{ steps.check-deployment.outputs.deployment_id }}" ]]; then
              case "$new_state" in
                "READY")
                  echo "‚úÖ New deployment completed successfully!"
                  echo "success=true" >> $GITHUB_OUTPUT
                  exit 0
                  ;;
                "ERROR"|"CANCELED")
                  echo "‚ùå New deployment failed with state: $new_state"
                  echo "success=false" >> $GITHUB_OUTPUT
                  exit 0
                  ;;
                "BUILDING"|"QUEUED"|"INITIALIZING")
                  echo "üîÑ New deployment in progress... ($new_state)"
                  ;;
              esac
            fi
            
            sleep $check_interval
            wait_time=$((wait_time + check_interval))
          done
          
          echo "‚è∞ Deployment did not complete within $max_wait seconds"
          echo "success=unknown" >> $GITHUB_OUTPUT
      
      - name: Report BMAD results
        if: always()
        run: |
          echo "üèóÔ∏è === BMAD AUTO-FIX RESULTS ==="
          echo "üéØ Project ID: $PROJECT_ID"
          echo "üî• Original deployment: ${{ steps.check-deployment.outputs.deployment_id }}"
          echo "üí• Original state: ${{ steps.check-deployment.outputs.state }}"
          echo "üîß Needed fix: ${{ steps.check-deployment.outputs.needs_fix }}"
          echo "üìù Had errors: ${{ steps.get-logs.outputs.has_errors }}"
          echo "‚úÖ New deployment success: ${{ steps.wait-deployment.outputs.success }}"
          echo "ü§ñ Agent: BMAD Development Agent"
          echo "üìö Method: Story-Driven Development"
          
          if [[ "${{ steps.check-deployment.outputs.needs_fix }}" == "true" ]]; then
            if [[ "${{ steps.wait-deployment.outputs.success }}" == "true" ]]; then
              echo ""
              echo "üéâ === BMAD AUTO-FIX SUCCESSFUL ==="
              echo "‚úÖ BMAD development agent successfully resolved deployment issues"
              echo "üöÄ System is now operational"
              echo "üìä Recovery Method: Systematic story-driven development"
              echo "‚è±Ô∏è  Recovery Time: GitHub Actions automated"
            elif [[ "${{ steps.wait-deployment.outputs.success }}" == "false" ]]; then
              echo ""
              echo "üí• === BMAD AUTO-FIX FAILED ==="
              echo "‚ùå BMAD development agent could not resolve all deployment issues"
              echo "üîç Manual intervention may be required"
              echo "üìã Check deployment logs and BMAD stories for analysis"
              exit 1
            else
              echo ""
              echo "‚ö†Ô∏è === BMAD AUTO-FIX STATUS UNCLEAR ==="
              echo "ü§î BMAD agent completed but deployment status is unclear"
              echo "üîç Manual verification recommended"
            fi
          else
            echo ""
            echo "‚ÑπÔ∏è === NO BMAD INTERVENTION NEEDED ==="
            echo "‚úÖ Deployment is in good state"
            echo "üéØ No emergency recovery required"
          fi
          
          echo ""
          echo "üìä === BMAD METHODOLOGY SUMMARY ==="
          echo "üéØ Agent Role: Developer"
          echo "üìñ Approach: Story-driven development"
          echo "üîß Focus: Minimal intervention for maximum impact"
          echo "‚ö° Priority: Emergency deployment recovery"
          echo "ü§ñ Platform: GitHub Actions automation"
      
      - name: Cleanup
        if: always()
        run: |
          rm -f deployment-errors.txt bmad-agent-prompt.txt
          echo "üßπ BMAD cleanup completed"